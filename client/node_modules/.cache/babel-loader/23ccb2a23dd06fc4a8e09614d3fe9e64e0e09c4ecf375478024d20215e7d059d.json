{"ast":null,"code":"\"use strict\";\n\nexports.formatISO9075 = formatISO9075;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nfunction formatISO9075(date, options) {\n  const _date = (0, _index2.toDate)(date);\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n  let result = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index3.addLeadingZeros)(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with a space\n    const separator = result === \"\" ? \"\" : \" \";\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n  return result;\n}","map":{"version":3,"names":["exports","formatISO9075","_index","require","_index2","_index3","date","options","_date","toDate","isValid","RangeError","format","representation","result","dateDelimiter","timeDelimiter","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/formatISO9075.js"],"sourcesContent":["\"use strict\";\nexports.formatISO9075 = formatISO9075;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\n\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nfunction formatISO9075(date, options) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index3.addLeadingZeros)(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with a space\n    const separator = result === \"\" ? \"\" : \" \";\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,aAAa,GAAGA,aAAa;AACrC,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AACpC,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEpC,IAAIE,OAAO,GAAGF,OAAO,CAAC,2BAA2B,CAAC;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,aAAaA,CAACK,IAAI,EAAEC,OAAO,EAAE;EACpC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,MAAM,EAAEH,IAAI,CAAC;EAEvC,IAAI,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAACQ,OAAO,EAAEF,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAIG,UAAU,CAAC,oBAAoB,CAAC;EAC5C;EAEA,MAAMC,MAAM,GAAGL,OAAO,EAAEK,MAAM,IAAI,UAAU;EAC5C,MAAMC,cAAc,GAAGN,OAAO,EAAEM,cAAc,IAAI,UAAU;EAE5D,IAAIC,MAAM,GAAG,EAAE;EAEf,MAAMC,aAAa,GAAGH,MAAM,KAAK,UAAU,GAAG,GAAG,GAAG,EAAE;EACtD,MAAMI,aAAa,GAAGJ,MAAM,KAAK,UAAU,GAAG,GAAG,GAAG,EAAE;;EAEtD;EACA,IAAIC,cAAc,KAAK,MAAM,EAAE;IAC7B,MAAMI,GAAG,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACa,eAAe,EAAEV,KAAK,CAACW,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IAC5D,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEf,OAAO,CAACa,eAAe,EAAEV,KAAK,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACnE,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEjB,OAAO,CAACa,eAAe,EAAEV,KAAK,CAACe,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEjE;IACAT,MAAM,GAAG,GAAGQ,IAAI,GAAGP,aAAa,GAAGK,KAAK,GAAGL,aAAa,GAAGE,GAAG,EAAE;EAClE;;EAEA;EACA,IAAIJ,cAAc,KAAK,MAAM,EAAE;IAC7B,MAAMW,IAAI,GAAG,CAAC,CAAC,EAAEnB,OAAO,CAACa,eAAe,EAAEV,KAAK,CAACiB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9D,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAErB,OAAO,CAACa,eAAe,EAAEV,KAAK,CAACmB,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IAClE,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAEvB,OAAO,CAACa,eAAe,EAAEV,KAAK,CAACqB,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;;IAElE;IACA,MAAMC,SAAS,GAAGhB,MAAM,KAAK,EAAE,GAAG,EAAE,GAAG,GAAG;;IAE1C;IACAA,MAAM,GAAG,GAAGA,MAAM,GAAGgB,SAAS,GAAGN,IAAI,GAAGR,aAAa,GAAGU,MAAM,GAAGV,aAAa,GAAGY,MAAM,EAAE;EAC3F;EAEA,OAAOd,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
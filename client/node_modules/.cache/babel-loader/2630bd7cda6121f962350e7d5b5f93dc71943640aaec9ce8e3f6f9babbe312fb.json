{"ast":null,"code":"\"use strict\";\n\nexports.formatRFC3339 = formatRFC3339;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nfunction formatRFC3339(date, options) {\n  const _date = (0, _index2.toDate)(date);\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n  const fractionDigits = options?.fractionDigits ?? 0;\n  const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n  const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n  const year = _date.getFullYear();\n  const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n  const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n  const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n  let fractionalSecond = \"\";\n  if (fractionDigits > 0) {\n    const milliseconds = _date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = \".\" + (0, _index3.addLeadingZeros)(fractionalSeconds, fractionDigits);\n  }\n  let offset = \"\";\n  const tzOffset = _date.getTimezoneOffset();\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = (0, _index3.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n    const minuteOffset = (0, _index3.addLeadingZeros)(absoluteOffset % 60, 2);\n    // If less than 0, the sign is +, because it is ahead of time.\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n}","map":{"version":3,"names":["exports","formatRFC3339","_index","require","_index2","_index3","date","options","_date","toDate","isValid","RangeError","fractionDigits","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","Math","trunc","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","minuteOffset","sign"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/formatRFC3339.js"],"sourcesContent":["\"use strict\";\nexports.formatRFC3339 = formatRFC3339;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nfunction formatRFC3339(date, options) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const fractionDigits = options?.fractionDigits ?? 0;\n\n  const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n  const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n  const year = _date.getFullYear();\n\n  const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n  const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n  const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n\n  let fractionalSecond = \"\";\n  if (fractionDigits > 0) {\n    const milliseconds = _date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, fractionDigits - 3),\n    );\n    fractionalSecond =\n      \".\" + (0, _index3.addLeadingZeros)(fractionalSeconds, fractionDigits);\n  }\n\n  let offset = \"\";\n  const tzOffset = _date.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = (0, _index3.addLeadingZeros)(\n      Math.trunc(absoluteOffset / 60),\n      2,\n    );\n    const minuteOffset = (0, _index3.addLeadingZeros)(absoluteOffset % 60, 2);\n    // If less than 0, the sign is +, because it is ahead of time.\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nexports.getWeekYear = getWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./toDate.js\");\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = (0, _index3.toDate)(date);\n  const year = _date.getFullYear();\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;\n  const firstWeekOfNextYear = (0, _index.constructFrom)(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfWeek)(firstWeekOfNextYear, options);\n  const firstWeekOfThisYear = (0, _index.constructFrom)(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfWeek)(firstWeekOfThisYear, options);\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","map":{"version":3,"names":["exports","getWeekYear","_index","require","_index2","_index3","_index4","date","options","_date","toDate","year","getFullYear","defaultOptions","getDefaultOptions","firstWeekContainsDate","locale","firstWeekOfNextYear","constructFrom","setFullYear","setHours","startOfNextYear","startOfWeek","firstWeekOfThisYear","startOfThisYear","getTime"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/getWeekYear.js"],"sourcesContent":["\"use strict\";\nexports.getWeekYear = getWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = (0, _index3.toDate)(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = (0, _index.constructFrom)(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfWeek)(\n    firstWeekOfNextYear,\n    options,\n  );\n\n  const firstWeekOfThisYear = (0, _index.constructFrom)(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfWeek)(\n    firstWeekOfThisYear,\n    options,\n  );\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,WAAW,GAAGA,WAAW;AACjC,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEpC,IAAIG,OAAO,GAAGH,OAAO,CAAC,0BAA0B,CAAC;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,WAAWA,CAACM,IAAI,EAAEC,OAAO,EAAE;EAClC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,MAAM,EAAEH,IAAI,CAAC;EACvC,MAAMI,IAAI,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;EAEhC,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACQ,iBAAiB,EAAE,CAAC;EACvD,MAAMC,qBAAqB,GACzBP,OAAO,EAAEO,qBAAqB,IAC9BP,OAAO,EAAEQ,MAAM,EAAER,OAAO,EAAEO,qBAAqB,IAC/CF,cAAc,CAACE,qBAAqB,IACpCF,cAAc,CAACG,MAAM,EAAER,OAAO,EAAEO,qBAAqB,IACrD,CAAC;EAEH,MAAME,mBAAmB,GAAG,CAAC,CAAC,EAAEf,MAAM,CAACgB,aAAa,EAAEX,IAAI,EAAE,CAAC,CAAC;EAC9DU,mBAAmB,CAACE,WAAW,CAACR,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEI,qBAAqB,CAAC;EACnEE,mBAAmB,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMC,eAAe,GAAG,CAAC,CAAC,EAAEjB,OAAO,CAACkB,WAAW,EAC7CL,mBAAmB,EACnBT,OACF,CAAC;EAED,MAAMe,mBAAmB,GAAG,CAAC,CAAC,EAAErB,MAAM,CAACgB,aAAa,EAAEX,IAAI,EAAE,CAAC,CAAC;EAC9DgB,mBAAmB,CAACJ,WAAW,CAACR,IAAI,EAAE,CAAC,EAAEI,qBAAqB,CAAC;EAC/DQ,mBAAmB,CAACH,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxC,MAAMI,eAAe,GAAG,CAAC,CAAC,EAAEpB,OAAO,CAACkB,WAAW,EAC7CC,mBAAmB,EACnBf,OACF,CAAC;EAED,IAAIC,KAAK,CAACgB,OAAO,CAAC,CAAC,IAAIJ,eAAe,CAACI,OAAO,CAAC,CAAC,EAAE;IAChD,OAAOd,IAAI,GAAG,CAAC;EACjB,CAAC,MAAM,IAAIF,KAAK,CAACgB,OAAO,CAAC,CAAC,IAAID,eAAe,CAACC,OAAO,CAAC,CAAC,EAAE;IACvD,OAAOd,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,IAAI,GAAG,CAAC;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
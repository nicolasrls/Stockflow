{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarDays = differenceInCalendarDays;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfDay.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);\n  const startOfDayRight = (0, _index2.startOfDay)(dateRight);\n  const timestampLeft = +startOfDayLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);\n  const timestampRight = +startOfDayRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInDay);\n}","map":{"version":3,"names":["exports","differenceInCalendarDays","_index","require","_index2","_index3","dateLeft","dateRight","startOfDayLeft","startOfDay","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInDay"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/differenceInCalendarDays.js"],"sourcesContent":["\"use strict\";\nexports.differenceInCalendarDays = differenceInCalendarDays;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfDay.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);\n  const startOfDayRight = (0, _index2.startOfDay)(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(\n    (timestampLeft - timestampRight) / _index.millisecondsInDay,\n  );\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,wBAAwB,GAAGA,wBAAwB;AAC3D,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACxC,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAA2C,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,wBAAwBA,CAACK,QAAQ,EAAEC,SAAS,EAAE;EACrD,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,UAAU,EAAEH,QAAQ,CAAC;EACxD,MAAMI,eAAe,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACK,UAAU,EAAEF,SAAS,CAAC;EAE1D,MAAMI,aAAa,GACjB,CAACH,cAAc,GACf,CAAC,CAAC,EAAEH,OAAO,CAACO,+BAA+B,EAAEJ,cAAc,CAAC;EAC9D,MAAMK,cAAc,GAClB,CAACH,eAAe,GAChB,CAAC,CAAC,EAAEL,OAAO,CAACO,+BAA+B,EAAEF,eAAe,CAAC;;EAE/D;EACA;EACA;EACA,OAAOI,IAAI,CAACC,KAAK,CACf,CAACJ,aAAa,GAAGE,cAAc,IAAIX,MAAM,CAACc,iBAC5C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
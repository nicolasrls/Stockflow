{"ast":null,"code":"\"use strict\";\n\nexports.set = set;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./setMonth.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nfunction set(date, values) {\n  let _date = (0, _index3.toDate)(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n  if (values.month != null) {\n    _date = (0, _index2.setMonth)(_date, values.month);\n  }\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n  return _date;\n}","map":{"version":3,"names":["exports","set","_index","require","_index2","_index3","date","values","_date","toDate","isNaN","constructFrom","NaN","year","setFullYear","month","setMonth","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/set.js"],"sourcesContent":["\"use strict\";\nexports.set = set;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./setMonth.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nfunction set(date, values) {\n  let _date = (0, _index3.toDate)(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = (0, _index2.setMonth)(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,GAAG,GAAGA,GAAG;AACjB,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,eAAe,CAAC;AACtC,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,GAAGA,CAACK,IAAI,EAAEC,MAAM,EAAE;EACzB,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,IAAI,CAAC;;EAErC;EACA,IAAII,KAAK,CAAC,CAACF,KAAK,CAAC,EAAE;IACjB,OAAO,CAAC,CAAC,EAAEN,MAAM,CAACS,aAAa,EAAEL,IAAI,EAAEM,GAAG,CAAC;EAC7C;EAEA,IAAIL,MAAM,CAACM,IAAI,IAAI,IAAI,EAAE;IACvBL,KAAK,CAACM,WAAW,CAACP,MAAM,CAACM,IAAI,CAAC;EAChC;EAEA,IAAIN,MAAM,CAACQ,KAAK,IAAI,IAAI,EAAE;IACxBP,KAAK,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACY,QAAQ,EAAER,KAAK,EAAED,MAAM,CAACQ,KAAK,CAAC;EACpD;EAEA,IAAIR,MAAM,CAACD,IAAI,IAAI,IAAI,EAAE;IACvBE,KAAK,CAACS,OAAO,CAACV,MAAM,CAACD,IAAI,CAAC;EAC5B;EAEA,IAAIC,MAAM,CAACW,KAAK,IAAI,IAAI,EAAE;IACxBV,KAAK,CAACW,QAAQ,CAACZ,MAAM,CAACW,KAAK,CAAC;EAC9B;EAEA,IAAIX,MAAM,CAACa,OAAO,IAAI,IAAI,EAAE;IAC1BZ,KAAK,CAACa,UAAU,CAACd,MAAM,CAACa,OAAO,CAAC;EAClC;EAEA,IAAIb,MAAM,CAACe,OAAO,IAAI,IAAI,EAAE;IAC1Bd,KAAK,CAACe,UAAU,CAAChB,MAAM,CAACe,OAAO,CAAC;EAClC;EAEA,IAAIf,MAAM,CAACiB,YAAY,IAAI,IAAI,EAAE;IAC/BhB,KAAK,CAACiB,eAAe,CAAClB,MAAM,CAACiB,YAAY,CAAC;EAC5C;EAEA,OAAOhB,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
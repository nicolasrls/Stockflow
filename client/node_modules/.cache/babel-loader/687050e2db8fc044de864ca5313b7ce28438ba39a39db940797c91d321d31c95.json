{"ast":null,"code":"\"use strict\";\n\nexports.closestTo = closestTo;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateToCompare - The date to compare with\n * @param dates - The array to search\n *\n * @returns The date from the array closest to the given date or undefined if no valid value is given\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nfunction closestTo(dateToCompare, dates) {\n  const date = (0, _index2.toDate)(dateToCompare);\n  if (isNaN(Number(date))) return (0, _index.constructFrom)(dateToCompare, NaN);\n  const timeToCompare = date.getTime();\n  let result;\n  let minDistance;\n  dates.forEach(dirtyDate => {\n    const currentDate = (0, _index2.toDate)(dirtyDate);\n    if (isNaN(Number(currentDate))) {\n      result = (0, _index.constructFrom)(dateToCompare, NaN);\n      minDistance = NaN;\n      return;\n    }\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"names":["exports","closestTo","_index","require","_index2","dateToCompare","dates","date","toDate","isNaN","Number","constructFrom","NaN","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","currentDate","distance","Math","abs"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/closestTo.js"],"sourcesContent":["\"use strict\";\nexports.closestTo = closestTo;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateToCompare - The date to compare with\n * @param dates - The array to search\n *\n * @returns The date from the array closest to the given date or undefined if no valid value is given\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nfunction closestTo(dateToCompare, dates) {\n  const date = (0, _index2.toDate)(dateToCompare);\n\n  if (isNaN(Number(date))) return (0, _index.constructFrom)(dateToCompare, NaN);\n\n  const timeToCompare = date.getTime();\n\n  let result;\n  let minDistance;\n  dates.forEach((dirtyDate) => {\n    const currentDate = (0, _index2.toDate)(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = (0, _index.constructFrom)(dateToCompare, NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n\n  return result;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,SAAS,GAAGA,SAAS;AAC7B,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,SAASA,CAACI,aAAa,EAAEC,KAAK,EAAE;EACvC,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACI,MAAM,EAAEH,aAAa,CAAC;EAE/C,IAAII,KAAK,CAACC,MAAM,CAACH,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACS,aAAa,EAAEN,aAAa,EAAEO,GAAG,CAAC;EAE7E,MAAMC,aAAa,GAAGN,IAAI,CAACO,OAAO,CAAC,CAAC;EAEpC,IAAIC,MAAM;EACV,IAAIC,WAAW;EACfV,KAAK,CAACW,OAAO,CAAEC,SAAS,IAAK;IAC3B,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAEf,OAAO,CAACI,MAAM,EAAEU,SAAS,CAAC;IAElD,IAAIT,KAAK,CAACC,MAAM,CAACS,WAAW,CAAC,CAAC,EAAE;MAC9BJ,MAAM,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACS,aAAa,EAAEN,aAAa,EAAEO,GAAG,CAAC;MACtDI,WAAW,GAAGJ,GAAG;MACjB;IACF;IAEA,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACT,aAAa,GAAGM,WAAW,CAACL,OAAO,CAAC,CAAC,CAAC;IAChE,IAAIC,MAAM,IAAI,IAAI,IAAIK,QAAQ,GAAGJ,WAAW,EAAE;MAC5CD,MAAM,GAAGI,WAAW;MACpBH,WAAW,GAAGI,QAAQ;IACxB;EACF,CAAC,CAAC;EAEF,OAAOL,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nexports.interval = interval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link interval} function options.\n */\n\n/**\n * @name interval\n * @category Interval Helpers\n * @summary Creates an interval object and validates its values.\n *\n * @description\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param start - The start of the interval.\n * @param end - The end of the interval.\n * @param options - The options object.\n *\n * @throws `Start date is invalid` when `start` is invalid.\n * @throws `End date is invalid` when `end` is invalid.\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n *\n * @returns The normalized and validated interval object.\n */\nfunction interval(start, end, options) {\n  const _start = (0, _index.toDate)(start);\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n  const _end = (0, _index.toDate)(end);\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n  if (options?.assertPositive && +_start > +_end) throw new TypeError(\"End date must be after start date\");\n  return {\n    start: _start,\n    end: _end\n  };\n}","map":{"version":3,"names":["exports","interval","_index","require","start","end","options","_start","toDate","isNaN","TypeError","_end","assertPositive"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/interval.js"],"sourcesContent":["\"use strict\";\nexports.interval = interval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link interval} function options.\n */\n\n/**\n * @name interval\n * @category Interval Helpers\n * @summary Creates an interval object and validates its values.\n *\n * @description\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param start - The start of the interval.\n * @param end - The end of the interval.\n * @param options - The options object.\n *\n * @throws `Start date is invalid` when `start` is invalid.\n * @throws `End date is invalid` when `end` is invalid.\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n *\n * @returns The normalized and validated interval object.\n */\nfunction interval(start, end, options) {\n  const _start = (0, _index.toDate)(start);\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n\n  const _end = (0, _index.toDate)(end);\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n\n  if (options?.assertPositive && +_start > +_end)\n    throw new TypeError(\"End date must be after start date\");\n\n  return { start: _start, end: _end };\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,QAAQ,GAAGA,QAAQ;AAC3B,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,QAAQA,CAACG,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;EACrC,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACM,MAAM,EAAEJ,KAAK,CAAC;EACxC,IAAIK,KAAK,CAAC,CAACF,MAAM,CAAC,EAAE,MAAM,IAAIG,SAAS,CAAC,uBAAuB,CAAC;EAEhE,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAET,MAAM,CAACM,MAAM,EAAEH,GAAG,CAAC;EACpC,IAAII,KAAK,CAAC,CAACE,IAAI,CAAC,EAAE,MAAM,IAAID,SAAS,CAAC,qBAAqB,CAAC;EAE5D,IAAIJ,OAAO,EAAEM,cAAc,IAAI,CAACL,MAAM,GAAG,CAACI,IAAI,EAC5C,MAAM,IAAID,SAAS,CAAC,mCAAmC,CAAC;EAE1D,OAAO;IAAEN,KAAK,EAAEG,MAAM;IAAEF,GAAG,EAAEM;EAAK,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nexports.roundToNearestHours = roundToNearestHours;\nvar _index = require(\"./_lib/getRoundingMethod.js\");\nvar _index2 = require(\"./constructFrom.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link roundToNearestHours} function options.\n */\n\n/**\n * @name roundToNearestHours\n * @category Hour Helpers\n * @summary Rounds the given date to the nearest hour\n *\n * @description\n * Rounds the given date to the nearest hour (or number of hours).\n * Rounds up when the given date is exactly between the nearest round hours.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest hour\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n * //=> Thu Jul 10 2014 13:00:00\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n * //=> Thu Jul 10 2014 12:00:00\n\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n * //=> Thu Jul 10 2014 16:00:00\n\n* @example\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n * //=> Thu Jul 10 2014 02:00:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n * //=> Thu Jul 10 2014 08:00:00\n */\nfunction roundToNearestHours(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n  if (nearestTo < 1 || nearestTo > 12) return (0, _index2.constructFrom)(date, NaN);\n  const _date = (0, _index3.toDate)(date);\n  const fractionalMinutes = _date.getMinutes() / 60;\n  const fractionalSeconds = _date.getSeconds() / 60 / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;\n  const hours = _date.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds;\n\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\n\n  // nearestTo option does not care daylight savings time\n  const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setHours(roundedHours, 0, 0, 0);\n  return result;\n}","map":{"version":3,"names":["exports","roundToNearestHours","_index","require","_index2","_index3","date","options","nearestTo","constructFrom","NaN","_date","toDate","fractionalMinutes","getMinutes","fractionalSeconds","getSeconds","fractionalMilliseconds","getMilliseconds","hours","getHours","method","roundingMethod","getRoundingMethod","roundedHours","result","setHours"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/roundToNearestHours.js"],"sourcesContent":["\"use strict\";\nexports.roundToNearestHours = roundToNearestHours;\nvar _index = require(\"./_lib/getRoundingMethod.js\");\nvar _index2 = require(\"./constructFrom.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link roundToNearestHours} function options.\n */\n\n/**\n * @name roundToNearestHours\n * @category Hour Helpers\n * @summary Rounds the given date to the nearest hour\n *\n * @description\n * Rounds the given date to the nearest hour (or number of hours).\n * Rounds up when the given date is exactly between the nearest round hours.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest hour\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n * //=> Thu Jul 10 2014 13:00:00\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n * //=> Thu Jul 10 2014 12:00:00\n\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n * //=> Thu Jul 10 2014 16:00:00\n\n* @example\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n * //=> Thu Jul 10 2014 02:00:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n * //=> Thu Jul 10 2014 08:00:00\n */\nfunction roundToNearestHours(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n\n  if (nearestTo < 1 || nearestTo > 12)\n    return (0, _index2.constructFrom)(date, NaN);\n\n  const _date = (0, _index3.toDate)(date);\n  const fractionalMinutes = _date.getMinutes() / 60;\n  const fractionalSeconds = _date.getSeconds() / 60 / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;\n  const hours =\n    _date.getHours() +\n    fractionalMinutes +\n    fractionalSeconds +\n    fractionalMilliseconds;\n\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\n\n  // nearestTo option does not care daylight savings time\n  const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setHours(roundedHours, 0, 0, 0);\n  return result;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,mBAAmB,GAAGA,mBAAmB;AACjD,IAAIC,MAAM,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,mBAAmBA,CAACK,IAAI,EAAEC,OAAO,EAAE;EAC1C,MAAMC,SAAS,GAAGD,OAAO,EAAEC,SAAS,IAAI,CAAC;EAEzC,IAAIA,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAG,EAAE,EACjC,OAAO,CAAC,CAAC,EAAEJ,OAAO,CAACK,aAAa,EAAEH,IAAI,EAAEI,GAAG,CAAC;EAE9C,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEN,OAAO,CAACO,MAAM,EAAEN,IAAI,CAAC;EACvC,MAAMO,iBAAiB,GAAGF,KAAK,CAACG,UAAU,CAAC,CAAC,GAAG,EAAE;EACjD,MAAMC,iBAAiB,GAAGJ,KAAK,CAACK,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;EACtD,MAAMC,sBAAsB,GAAGN,KAAK,CAACO,eAAe,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE;EACvE,MAAMC,KAAK,GACTR,KAAK,CAACS,QAAQ,CAAC,CAAC,GAChBP,iBAAiB,GACjBE,iBAAiB,GACjBE,sBAAsB;;EAExB;EACA,MAAMI,MAAM,GAAGd,OAAO,EAAEe,cAAc,IAAI,OAAO;EACjD,MAAMA,cAAc,GAAG,CAAC,CAAC,EAAEpB,MAAM,CAACqB,iBAAiB,EAAEF,MAAM,CAAC;;EAE5D;EACA,MAAMG,YAAY,GAAGF,cAAc,CAACH,KAAK,GAAGX,SAAS,CAAC,GAAGA,SAAS;EAElE,MAAMiB,MAAM,GAAG,CAAC,CAAC,EAAErB,OAAO,CAACK,aAAa,EAAEH,IAAI,EAAEK,KAAK,CAAC;EACtDc,MAAM,CAACC,QAAQ,CAACF,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACtC,OAAOC,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
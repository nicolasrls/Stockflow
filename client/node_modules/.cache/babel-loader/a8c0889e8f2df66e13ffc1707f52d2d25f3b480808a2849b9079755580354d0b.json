{"ast":null,"code":"\"use strict\";\n\nexports.DayParser = void 0;\nvar _index = require(\"../../../setDay.js\");\nvar _Parser = require(\"../Parser.js\");\n\n// Day of week\nclass DayParser extends _Parser.Parser {\n  priority = 90;\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // Tu\n      case \"EEEEEE\":\n        return match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return match.day(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n  set(date, _flags, value, options) {\n    date = (0, _index.setDay)(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\nexports.DayParser = DayParser;","map":{"version":3,"names":["exports","DayParser","_index","require","_Parser","Parser","priority","parse","dateString","token","match","day","width","context","validate","_date","value","set","date","_flags","options","setDay","setHours","incompatibleTokens"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/parse/_lib/parsers/DayParser.js"],"sourcesContent":["\"use strict\";\nexports.DayParser = void 0;\nvar _index = require(\"../../../setDay.js\");\nvar _Parser = require(\"../Parser.js\");\n\n// Day of week\nclass DayParser extends _Parser.Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = (0, _index.setDay)(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\nexports.DayParser = DayParser;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;;AAErC;AACA,MAAMF,SAAS,SAASG,OAAO,CAACC,MAAM,CAAC;EACrCC,QAAQ,GAAG,EAAE;EAEbC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,QAAQD,KAAK;MACX;MACA,KAAK,GAAG;MACR,KAAK,IAAI;MACT,KAAK,KAAK;QACR,OACEC,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UACpBI,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IAChEH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;;MAGrE;MACA,KAAK,OAAO;QACV,OAAOH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAC3BI,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACA,KAAK,QAAQ;QACX,OACEH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IAChEH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;;MAGrE;MACA,KAAK,MAAM;MACX;QACE,OACEH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IAC/DH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UACpBI,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IAChEH,KAAK,CAACC,GAAG,CAACH,UAAU,EAAE;UAAEI,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;IAEvE;EACF;EAEAC,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACrB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,CAAC;EACjC;EAEAC,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEH,KAAK,EAAEI,OAAO,EAAE;IAChCF,IAAI,GAAG,CAAC,CAAC,EAAEhB,MAAM,CAACmB,MAAM,EAAEH,IAAI,EAAEF,KAAK,EAAEI,OAAO,CAAC;IAC/CF,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOJ,IAAI;EACb;EAEAK,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACrD;AACAvB,OAAO,CAACC,SAAS,GAAGA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
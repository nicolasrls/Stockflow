{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarWeeks = differenceInCalendarWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\nfunction differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);\n  const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);\n  const timestampLeft = +startOfWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);\n  const timestampRight = +startOfWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);\n}","map":{"version":3,"names":["exports","differenceInCalendarWeeks","_index","require","_index2","_index3","dateLeft","dateRight","options","startOfWeekLeft","startOfWeek","startOfWeekRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInWeek"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/differenceInCalendarWeeks.js"],"sourcesContent":["\"use strict\";\nexports.differenceInCalendarWeeks = differenceInCalendarWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\n\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\nfunction differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);\n  const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);\n\n  const timestampLeft =\n    +startOfWeekLeft -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);\n  const timestampRight =\n    +startOfWeekRight -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(\n    (timestampLeft - timestampRight) / _index.millisecondsInWeek,\n  );\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,yBAAyB,GAAGA,yBAAyB;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAEzC,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAA2C,CAAC;;AAElE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,yBAAyBA,CAACK,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAC/D,MAAMC,eAAe,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACM,WAAW,EAAEJ,QAAQ,EAAEE,OAAO,CAAC;EACnE,MAAMG,gBAAgB,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACM,WAAW,EAAEH,SAAS,EAAEC,OAAO,CAAC;EAErE,MAAMI,aAAa,GACjB,CAACH,eAAe,GAChB,CAAC,CAAC,EAAEJ,OAAO,CAACQ,+BAA+B,EAAEJ,eAAe,CAAC;EAC/D,MAAMK,cAAc,GAClB,CAACH,gBAAgB,GACjB,CAAC,CAAC,EAAEN,OAAO,CAACQ,+BAA+B,EAAEF,gBAAgB,CAAC;;EAEhE;EACA;EACA;EACA,OAAOI,IAAI,CAACC,KAAK,CACf,CAACJ,aAAa,GAAGE,cAAc,IAAIZ,MAAM,CAACe,kBAC5C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
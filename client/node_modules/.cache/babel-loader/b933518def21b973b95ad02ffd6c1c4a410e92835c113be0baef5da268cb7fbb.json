{"ast":null,"code":"\"use strict\";\n\nexports.eachMonthOfInterval = eachMonthOfInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link eachMonthOfInterval} function options.\n */\n\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * const result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\nfunction eachMonthOfInterval(interval, options) {\n  const startDate = (0, _index.toDate)(interval.start);\n  const endDate = (0, _index.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  const dates = [];\n  while (+currentDate <= endTime) {\n    dates.push((0, _index.toDate)(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + step);\n  }\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"names":["exports","eachMonthOfInterval","_index","require","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","currentDate","setHours","setDate","step","dates","push","setMonth","getMonth","reverse"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/eachMonthOfInterval.js"],"sourcesContent":["\"use strict\";\nexports.eachMonthOfInterval = eachMonthOfInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link eachMonthOfInterval} function options.\n */\n\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * const result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\nfunction eachMonthOfInterval(interval, options) {\n  const startDate = (0, _index.toDate)(interval.start);\n  const endDate = (0, _index.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index.toDate)(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,mBAAmB,GAAGA,mBAAmB;AACjD,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,mBAAmBA,CAACG,QAAQ,EAAEC,OAAO,EAAE;EAC9C,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAEJ,MAAM,CAACK,MAAM,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACpD,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAEP,MAAM,CAACK,MAAM,EAAEH,QAAQ,CAACM,GAAG,CAAC;EAEhD,IAAIC,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EACpC,MAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACL,SAAS,GAAG,CAACG,OAAO;EAChD,MAAMI,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGH,SAAS;EAClDO,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCD,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC;EAEtB,IAAIC,IAAI,GAAGX,OAAO,EAAEW,IAAI,IAAI,CAAC;EAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZL,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,MAAMM,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACJ,WAAW,IAAID,OAAO,EAAE;IAC9BK,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEhB,MAAM,CAACK,MAAM,EAAEM,WAAW,CAAC,CAAC;IAC3CA,WAAW,CAACM,QAAQ,CAACN,WAAW,CAACO,QAAQ,CAAC,CAAC,GAAGJ,IAAI,CAAC;EACrD;EAEA,OAAOL,QAAQ,GAAGM,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGJ,KAAK;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nexports.YearParser = void 0;\nvar _Parser = require(\"../Parser.js\");\nvar _utils = require(\"../utils.js\");\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"yy\"\n    });\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n      case \"yo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n      default:\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n    }\n  }\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\nexports.YearParser = YearParser;","map":{"version":3,"names":["exports","YearParser","_Parser","require","_utils","Parser","priority","incompatibleTokens","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","mapValue","parseNDigits","ordinalNumber","unit","length","validate","_date","value","set","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","normalizeTwoDigitYear","setFullYear","setHours","era"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/parse/_lib/parsers/YearParser.js"],"sourcesContent":["\"use strict\";\nexports.YearParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(4, dateString),\n          valueCallback,\n        );\n      case \"yo\":\n        return (0, _utils.mapValue)(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(token.length, dateString),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\nexports.YearParser = YearParser;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,UAAU,SAASC,OAAO,CAACG,MAAM,CAAC;EACtCC,QAAQ,GAAG,GAAG;EACdC,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAEvEC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,MAAMC,aAAa,GAAIC,IAAI,KAAM;MAC/BA,IAAI;MACJC,cAAc,EAAEJ,KAAK,KAAK;IAC5B,CAAC,CAAC;IAEF,QAAQA,KAAK;MACX,KAAK,GAAG;QACN,OAAO,CAAC,CAAC,EAAEN,MAAM,CAACW,QAAQ,EACxB,CAAC,CAAC,EAAEX,MAAM,CAACY,YAAY,EAAE,CAAC,EAAEP,UAAU,CAAC,EACvCG,aACF,CAAC;MACH,KAAK,IAAI;QACP,OAAO,CAAC,CAAC,EAAER,MAAM,CAACW,QAAQ,EACxBJ,KAAK,CAACM,aAAa,CAACR,UAAU,EAAE;UAC9BS,IAAI,EAAE;QACR,CAAC,CAAC,EACFN,aACF,CAAC;MACH;QACE,OAAO,CAAC,CAAC,EAAER,MAAM,CAACW,QAAQ,EACxB,CAAC,CAAC,EAAEX,MAAM,CAACY,YAAY,EAAEN,KAAK,CAACS,MAAM,EAAEV,UAAU,CAAC,EAClDG,aACF,CAAC;IACL;EACF;EAEAQ,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACrB,OAAOA,KAAK,CAACR,cAAc,IAAIQ,KAAK,CAACT,IAAI,GAAG,CAAC;EAC/C;EAEAU,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEH,KAAK,EAAE;IACtB,MAAMI,WAAW,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;IAEtC,IAAIL,KAAK,CAACR,cAAc,EAAE;MACxB,MAAMc,sBAAsB,GAAG,CAAC,CAAC,EAAExB,MAAM,CAACyB,qBAAqB,EAC7DP,KAAK,CAACT,IAAI,EACVa,WACF,CAAC;MACDF,IAAI,CAACM,WAAW,CAACF,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC;MAC9CJ,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzB,OAAOP,IAAI;IACb;IAEA,MAAMX,IAAI,GACR,EAAE,KAAK,IAAIY,KAAK,CAAC,IAAIA,KAAK,CAACO,GAAG,KAAK,CAAC,GAAGV,KAAK,CAACT,IAAI,GAAG,CAAC,GAAGS,KAAK,CAACT,IAAI;IACpEW,IAAI,CAACM,WAAW,CAACjB,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BW,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOP,IAAI;EACb;AACF;AACAxB,OAAO,CAACC,UAAU,GAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
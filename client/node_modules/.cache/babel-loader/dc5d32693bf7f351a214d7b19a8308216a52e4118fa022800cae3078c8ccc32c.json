{"ast":null,"code":"\"use strict\";\n\nexports.intervalToDuration = intervalToDuration;\nvar _index = require(\"./add.js\");\nvar _index2 = require(\"./differenceInDays.js\");\nvar _index3 = require(\"./differenceInHours.js\");\nvar _index4 = require(\"./differenceInMinutes.js\");\nvar _index5 = require(\"./differenceInMonths.js\");\nvar _index6 = require(\"./differenceInSeconds.js\");\nvar _index7 = require(\"./differenceInYears.js\");\nvar _index8 = require(\"./toDate.js\");\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval to convert to duration\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nfunction intervalToDuration(interval) {\n  const start = (0, _index8.toDate)(interval.start);\n  const end = (0, _index8.toDate)(interval.end);\n  const duration = {};\n  const years = (0, _index7.differenceInYears)(end, start);\n  if (years) duration.years = years;\n  const remainingMonths = (0, _index.add)(start, {\n    years: duration.years\n  });\n  const months = (0, _index5.differenceInMonths)(end, remainingMonths);\n  if (months) duration.months = months;\n  const remainingDays = (0, _index.add)(remainingMonths, {\n    months: duration.months\n  });\n  const days = (0, _index2.differenceInDays)(end, remainingDays);\n  if (days) duration.days = days;\n  const remainingHours = (0, _index.add)(remainingDays, {\n    days: duration.days\n  });\n  const hours = (0, _index3.differenceInHours)(end, remainingHours);\n  if (hours) duration.hours = hours;\n  const remainingMinutes = (0, _index.add)(remainingHours, {\n    hours: duration.hours\n  });\n  const minutes = (0, _index4.differenceInMinutes)(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n  const remainingSeconds = (0, _index.add)(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  const seconds = (0, _index6.differenceInSeconds)(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n  return duration;\n}","map":{"version":3,"names":["exports","intervalToDuration","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","_index8","interval","start","toDate","end","duration","years","differenceInYears","remainingMonths","add","months","differenceInMonths","remainingDays","days","differenceInDays","remainingHours","hours","differenceInHours","remainingMinutes","minutes","differenceInMinutes","remainingSeconds","seconds","differenceInSeconds"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/intervalToDuration.js"],"sourcesContent":["\"use strict\";\nexports.intervalToDuration = intervalToDuration;\nvar _index = require(\"./add.js\");\nvar _index2 = require(\"./differenceInDays.js\");\nvar _index3 = require(\"./differenceInHours.js\");\nvar _index4 = require(\"./differenceInMinutes.js\");\nvar _index5 = require(\"./differenceInMonths.js\");\nvar _index6 = require(\"./differenceInSeconds.js\");\nvar _index7 = require(\"./differenceInYears.js\");\nvar _index8 = require(\"./toDate.js\");\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval to convert to duration\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nfunction intervalToDuration(interval) {\n  const start = (0, _index8.toDate)(interval.start);\n  const end = (0, _index8.toDate)(interval.end);\n\n  const duration = {};\n\n  const years = (0, _index7.differenceInYears)(end, start);\n  if (years) duration.years = years;\n\n  const remainingMonths = (0, _index.add)(start, { years: duration.years });\n\n  const months = (0, _index5.differenceInMonths)(end, remainingMonths);\n  if (months) duration.months = months;\n\n  const remainingDays = (0, _index.add)(remainingMonths, {\n    months: duration.months,\n  });\n\n  const days = (0, _index2.differenceInDays)(end, remainingDays);\n  if (days) duration.days = days;\n\n  const remainingHours = (0, _index.add)(remainingDays, {\n    days: duration.days,\n  });\n\n  const hours = (0, _index3.differenceInHours)(end, remainingHours);\n  if (hours) duration.hours = hours;\n\n  const remainingMinutes = (0, _index.add)(remainingHours, {\n    hours: duration.hours,\n  });\n\n  const minutes = (0, _index4.differenceInMinutes)(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n\n  const remainingSeconds = (0, _index.add)(remainingMinutes, {\n    minutes: duration.minutes,\n  });\n\n  const seconds = (0, _index6.differenceInSeconds)(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n\n  return duration;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
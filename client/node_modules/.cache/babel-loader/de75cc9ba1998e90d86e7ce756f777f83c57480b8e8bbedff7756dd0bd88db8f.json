{"ast":null,"code":"\"use strict\";\n\nexports.StandAloneMonthParser = void 0;\nvar _constants = require(\"../constants.js\");\nvar _Parser = require(\"../Parser.js\");\nvar _utils = require(\"../utils.js\");\nclass StandAloneMonthParser extends _Parser.Parser {\n  priority = 110;\n  parse(dateString, token, match) {\n    const valueCallback = value => value - 1;\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"month\"\n        }), valueCallback);\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return match.month(dateString, {\n          width: \"wide\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n    }\n  }\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"M\", \"w\", \"I\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\nexports.StandAloneMonthParser = StandAloneMonthParser;","map":{"version":3,"names":["exports","StandAloneMonthParser","_constants","require","_Parser","_utils","Parser","priority","parse","dateString","token","match","valueCallback","value","mapValue","parseNumericPattern","numericPatterns","month","parseNDigits","ordinalNumber","unit","width","context","validate","_date","set","date","_flags","setMonth","setHours","incompatibleTokens"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js"],"sourcesContent":["\"use strict\";\nexports.StandAloneMonthParser = void 0;\nvar _constants = require(\"../constants.js\");\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass StandAloneMonthParser extends _Parser.Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNumericPattern)(\n            _constants.numericPatterns.month,\n            dateString,\n          ),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(2, dateString),\n          valueCallback,\n        );\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return (0, _utils.mapValue)(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\nexports.StandAloneMonthParser = StandAloneMonthParser;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,qBAAqB,GAAG,KAAK,CAAC;AACtC,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIE,MAAM,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEnC,MAAMF,qBAAqB,SAASG,OAAO,CAACE,MAAM,CAAC;EACjDC,QAAQ,GAAG,GAAG;EAEdC,KAAKA,CAACC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC9B,MAAMC,aAAa,GAAIC,KAAK,IAAKA,KAAK,GAAG,CAAC;IAE1C,QAAQH,KAAK;MACX;MACA,KAAK,GAAG;QACN,OAAO,CAAC,CAAC,EAAEL,MAAM,CAACS,QAAQ,EACxB,CAAC,CAAC,EAAET,MAAM,CAACU,mBAAmB,EAC5Bb,UAAU,CAACc,eAAe,CAACC,KAAK,EAChCR,UACF,CAAC,EACDG,aACF,CAAC;MACH;MACA,KAAK,IAAI;QACP,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACS,QAAQ,EACxB,CAAC,CAAC,EAAET,MAAM,CAACa,YAAY,EAAE,CAAC,EAAET,UAAU,CAAC,EACvCG,aACF,CAAC;MACH;MACA,KAAK,IAAI;QACP,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACS,QAAQ,EACxBH,KAAK,CAACQ,aAAa,CAACV,UAAU,EAAE;UAC9BW,IAAI,EAAE;QACR,CAAC,CAAC,EACFR,aACF,CAAC;MACH;MACA,KAAK,KAAK;QACR,OACED,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UACtBY,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAAEY,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;;MAGvE;MACA,KAAK,OAAO;QACV,OAAOX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAC7BY,KAAK,EAAE,QAAQ;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MACA,KAAK,MAAM;MACX;QACE,OACEX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAAEY,KAAK,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC,IACjEX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UACtBY,KAAK,EAAE,aAAa;UACpBC,OAAO,EAAE;QACX,CAAC,CAAC,IACFX,KAAK,CAACM,KAAK,CAACR,UAAU,EAAE;UAAEY,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;IAEzE;EACF;EAEAC,QAAQA,CAACC,KAAK,EAAEX,KAAK,EAAE;IACrB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,EAAE;EAClC;EAEAY,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEd,KAAK,EAAE;IACvBa,IAAI,CAACE,QAAQ,CAACf,KAAK,EAAE,CAAC,CAAC;IACvBa,IAAI,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOH,IAAI;EACb;EAEAI,kBAAkB,GAAG,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ;AACH;AACA9B,OAAO,CAACC,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
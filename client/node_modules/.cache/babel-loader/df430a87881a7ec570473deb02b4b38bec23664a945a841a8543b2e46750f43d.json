{"ast":null,"code":"\"use strict\";\n\nexports.setWeekYear = setWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\nvar _index5 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link setWeekYear} function options.\n */\n\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param weekYear - The local week-numbering year of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week-numbering year set\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\nfunction setWeekYear(date, weekYear, options) {\n  const defaultOptions = (0, _index5.getDefaultOptions)();\n  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;\n  let _date = (0, _index4.toDate)(date);\n  const diff = (0, _index2.differenceInCalendarDays)(_date, (0, _index3.startOfWeekYear)(_date, options));\n  const firstWeek = (0, _index.constructFrom)(date, 0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  _date = (0, _index3.startOfWeekYear)(firstWeek, options);\n  _date.setDate(_date.getDate() + diff);\n  return _date;\n}","map":{"version":3,"names":["exports","setWeekYear","_index","require","_index2","_index3","_index4","_index5","date","weekYear","options","defaultOptions","getDefaultOptions","firstWeekContainsDate","locale","_date","toDate","diff","differenceInCalendarDays","startOfWeekYear","firstWeek","constructFrom","setFullYear","setHours","setDate","getDate"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/setWeekYear.js"],"sourcesContent":["\"use strict\";\nexports.setWeekYear = setWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\nvar _index5 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link setWeekYear} function options.\n */\n\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param weekYear - The local week-numbering year of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week-numbering year set\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\nfunction setWeekYear(date, weekYear, options) {\n  const defaultOptions = (0, _index5.getDefaultOptions)();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  let _date = (0, _index4.toDate)(date);\n  const diff = (0, _index2.differenceInCalendarDays)(\n    _date,\n    (0, _index3.startOfWeekYear)(_date, options),\n  );\n  const firstWeek = (0, _index.constructFrom)(date, 0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  _date = (0, _index3.startOfWeekYear)(firstWeek, options);\n  _date.setDate(_date.getDate() + diff);\n  return _date;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,WAAW,GAAGA,WAAW;AACjC,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,OAAO,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AACtD,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAC7C,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAa,CAAC;AAEpC,IAAII,OAAO,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,WAAWA,CAACO,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC5C,MAAMC,cAAc,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACK,iBAAiB,EAAE,CAAC;EACvD,MAAMC,qBAAqB,GACzBH,OAAO,EAAEG,qBAAqB,IAC9BH,OAAO,EAAEI,MAAM,EAAEJ,OAAO,EAAEG,qBAAqB,IAC/CF,cAAc,CAACE,qBAAqB,IACpCF,cAAc,CAACG,MAAM,EAAEJ,OAAO,EAAEG,qBAAqB,IACrD,CAAC;EAEH,IAAIE,KAAK,GAAG,CAAC,CAAC,EAAET,OAAO,CAACU,MAAM,EAAER,IAAI,CAAC;EACrC,MAAMS,IAAI,GAAG,CAAC,CAAC,EAAEb,OAAO,CAACc,wBAAwB,EAC/CH,KAAK,EACL,CAAC,CAAC,EAAEV,OAAO,CAACc,eAAe,EAAEJ,KAAK,EAAEL,OAAO,CAC7C,CAAC;EACD,MAAMU,SAAS,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACmB,aAAa,EAAEb,IAAI,EAAE,CAAC,CAAC;EACpDY,SAAS,CAACE,WAAW,CAACb,QAAQ,EAAE,CAAC,EAAEI,qBAAqB,CAAC;EACzDO,SAAS,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9BR,KAAK,GAAG,CAAC,CAAC,EAAEV,OAAO,CAACc,eAAe,EAAEC,SAAS,EAAEV,OAAO,CAAC;EACxDK,KAAK,CAACS,OAAO,CAACT,KAAK,CAACU,OAAO,CAAC,CAAC,GAAGR,IAAI,CAAC;EACrC,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
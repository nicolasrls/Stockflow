{"ast":null,"code":"\"use strict\";\n\nexports.intlFormatDistance = intlFormatDistance;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./differenceInCalendarMonths.js\");\nvar _index4 = require(\"./differenceInCalendarQuarters.js\");\nvar _index5 = require(\"./differenceInCalendarWeeks.js\");\nvar _index6 = require(\"./differenceInCalendarYears.js\");\nvar _index7 = require(\"./differenceInHours.js\");\nvar _index8 = require(\"./differenceInMinutes.js\");\nvar _index9 = require(\"./differenceInSeconds.js\");\nvar _index10 = require(\"./toDate.js\");\n\n/**\n * The {@link intlFormatDistance} function options.\n */\n\n/**\n * The unit used to format the distance in {@link intlFormatDistance}.\n */\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with.\n * @param options - An object with options.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * The narrow one could be similar to the short one for some locales.\n *\n * @returns The distance in words according to language-sensitive relative time formatting.\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must not be invalid Unit\n * @throws `options.locale` must not be invalid locale\n * @throws `options.localeMatcher` must not be invalid localeMatcher\n * @throws `options.numeric` must not be invalid numeric\n * @throws `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nfunction intlFormatDistance(date, baseDate, options) {\n  let value = 0;\n  let unit;\n  const dateLeft = (0, _index10.toDate)(date);\n  const dateRight = (0, _index10.toDate)(baseDate);\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = (0, _index9.differenceInSeconds)(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < _index.secondsInMinute) {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n      unit = \"minute\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) < 1) {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n      unit = \"hour\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) && Math.abs(value) < 7) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {\n      if ((0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n        unit = \"quarter\";\n      } else {\n        value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n        unit = \"year\";\n      }\n    } else {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n    if (unit === \"second\") {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n    } else if (unit === \"minute\") {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n    } else if (unit === \"hour\") {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n    } else if (unit === \"day\") {\n      value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight);\n    } else if (unit === \"week\") {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n    } else if (unit === \"month\") {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n    } else if (unit === \"quarter\") {\n      value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n    } else if (unit === \"year\") {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n    }\n  }\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    localeMatcher: options?.localeMatcher,\n    numeric: options?.numeric || \"auto\",\n    style: options?.style\n  });\n  return rtf.format(value, unit);\n}","map":{"version":3,"names":["exports","intlFormatDistance","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","_index8","_index9","_index10","date","baseDate","options","value","unit","dateLeft","toDate","dateRight","diffInSeconds","differenceInSeconds","Math","abs","secondsInMinute","secondsInHour","differenceInMinutes","secondsInDay","differenceInCalendarDays","differenceInHours","secondsInWeek","secondsInMonth","differenceInCalendarWeeks","secondsInQuarter","differenceInCalendarMonths","secondsInYear","differenceInCalendarQuarters","differenceInCalendarYears","rtf","Intl","RelativeTimeFormat","locale","localeMatcher","numeric","style","format"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/node_modules/date-fns/intlFormatDistance.js"],"sourcesContent":["\"use strict\";\nexports.intlFormatDistance = intlFormatDistance;\nvar _index = require(\"./constants.js\");\n\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./differenceInCalendarMonths.js\");\nvar _index4 = require(\"./differenceInCalendarQuarters.js\");\nvar _index5 = require(\"./differenceInCalendarWeeks.js\");\nvar _index6 = require(\"./differenceInCalendarYears.js\");\nvar _index7 = require(\"./differenceInHours.js\");\nvar _index8 = require(\"./differenceInMinutes.js\");\nvar _index9 = require(\"./differenceInSeconds.js\");\nvar _index10 = require(\"./toDate.js\");\n\n/**\n * The {@link intlFormatDistance} function options.\n */\n\n/**\n * The unit used to format the distance in {@link intlFormatDistance}.\n */\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with.\n * @param options - An object with options.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * The narrow one could be similar to the short one for some locales.\n *\n * @returns The distance in words according to language-sensitive relative time formatting.\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must not be invalid Unit\n * @throws `options.locale` must not be invalid locale\n * @throws `options.localeMatcher` must not be invalid localeMatcher\n * @throws `options.numeric` must not be invalid numeric\n * @throws `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nfunction intlFormatDistance(date, baseDate, options) {\n  let value = 0;\n  let unit;\n  const dateLeft = (0, _index10.toDate)(date);\n  const dateRight = (0, _index10.toDate)(baseDate);\n\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = (0, _index9.differenceInSeconds)(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < _index.secondsInMinute) {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n      unit = \"minute\";\n    } else if (\n      Math.abs(diffInSeconds) < _index.secondsInDay &&\n      Math.abs((0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) < 1\n    ) {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n      unit = \"hour\";\n    } else if (\n      Math.abs(diffInSeconds) < _index.secondsInWeek &&\n      (value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) &&\n      Math.abs(value) < 7\n    ) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {\n      if ((0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n        unit = \"quarter\";\n      } else {\n        value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n        unit = \"year\";\n      }\n    } else {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n    if (unit === \"second\") {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n    } else if (unit === \"minute\") {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n    } else if (unit === \"hour\") {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n    } else if (unit === \"day\") {\n      value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight);\n    } else if (unit === \"week\") {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n    } else if (unit === \"month\") {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n    } else if (unit === \"quarter\") {\n      value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n    } else if (unit === \"year\") {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n    }\n  }\n\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    localeMatcher: options?.localeMatcher,\n    numeric: options?.numeric || \"auto\",\n    style: options?.style,\n  });\n\n  return rtf.format(value, unit);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\sotckflow 2\\\\Stockflow\\\\client\\\\src\\\\components\\\\Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [senha, setSenha] = useState('');\n  const [twoFactorToken, setTwoFactorToken] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showTwoFactor, setShowTwoFactor] = useState(false); // Controle para mostrar o Token 2FA\n\n  const handleLogin = async e => {\n    e.preventDefault();\n    if (email && senha) {\n      try {\n        // Enviar dados de login para o back-end\n        const response = await fetch('http://localhost:5000/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            password: senha\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Caso 2FA seja necessário, mostramos o campo para o Token 2FA\n          if (data.twoFactorRequired) {\n            setShowTwoFactor(true); // Exibe o campo para o Token 2FA\n          } else {\n            // Sucesso - Armazenar o token JWT no localStorage ou no estado\n            alert('Login bem-sucedido!');\n            localStorage.setItem('token', data.token); // Exemplo de armazenamento de token\n          }\n        } else {\n          // Mostrar erro\n          setErrorMessage(data.message || 'Erro ao fazer login');\n        }\n      } catch (error) {\n        setErrorMessage('Erro de conexão. Tente novamente mais tarde.');\n      }\n    } else {\n      setErrorMessage('Por favor, preencha todos os campos.');\n    }\n  };\n  const handleTwoFactorSubmit = async e => {\n    e.preventDefault();\n    if (twoFactorToken) {\n      try {\n        // Enviar o Token 2FA para o back-end\n        const response = await fetch('http://localhost:5000/api/auth/verify-2fa', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            twoFactorToken\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          alert('Login bem-sucedido!');\n          localStorage.setItem('token', data.token); // Exemplo de armazenamento de token\n        } else {\n          setErrorMessage(data.message || 'Token 2FA inválido');\n        }\n      } catch (error) {\n        setErrorMessage('Erro ao verificar o Token 2FA');\n      }\n    } else {\n      setErrorMessage('Por favor, insira o Token 2FA');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-box\",\n      children: [!showTwoFactor ?\n      /*#__PURE__*/\n      // Formulário de login (email e senha)\n      _jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Senha\",\n          value: senha,\n          onChange: e => setSenha(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Entrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) :\n      /*#__PURE__*/\n      // Formulário de Token 2FA\n      _jsxDEV(\"div\", {\n        className: \"qrcode-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Digite o c\\xF3digo de autentica\\xE7\\xE3o de dois fatores enviado para voc\\xEA.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleTwoFactorSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Token 2FA\",\n            value: twoFactorToken,\n            onChange: e => setTwoFactorToken(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Verificar Token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 34\n      }, this), !showTwoFactor && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"N\\xE3o tem uma conta? \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/registro\",\n          children: \"Cadastro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"f7E6TPdgKwYvspgF3oPP2qqw3dE=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Login","_s","email","setEmail","senha","setSenha","twoFactorToken","setTwoFactorToken","errorMessage","setErrorMessage","showTwoFactor","setShowTwoFactor","handleLogin","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","password","data","json","ok","twoFactorRequired","alert","localStorage","setItem","token","message","error","handleTwoFactorSubmit","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","style","color","href","_c","$RefreshReg$"],"sources":["C:/Users/gabri/OneDrive/Área de Trabalho/sotckflow 2/Stockflow/client/src/components/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Login.css';\r\n\r\nconst Login: React.FC = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [senha, setSenha] = useState('');\r\n    const [twoFactorToken, setTwoFactorToken] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [showTwoFactor, setShowTwoFactor] = useState(false); // Controle para mostrar o Token 2FA\r\n\r\n    const handleLogin = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        if (email && senha) {\r\n            try {\r\n                // Enviar dados de login para o back-end\r\n                const response = await fetch('http://localhost:5000/api/auth/login', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        email,\r\n                        password: senha,\r\n                    }),\r\n                });\r\n\r\n                const data = await response.json();\r\n\r\n                if (response.ok) {\r\n                    // Caso 2FA seja necessário, mostramos o campo para o Token 2FA\r\n                    if (data.twoFactorRequired) {\r\n                        setShowTwoFactor(true); // Exibe o campo para o Token 2FA\r\n                    } else {\r\n                        // Sucesso - Armazenar o token JWT no localStorage ou no estado\r\n                        alert('Login bem-sucedido!');\r\n                        localStorage.setItem('token', data.token); // Exemplo de armazenamento de token\r\n                    }\r\n                } else {\r\n                    // Mostrar erro\r\n                    setErrorMessage(data.message || 'Erro ao fazer login');\r\n                }\r\n            } catch (error) {\r\n                setErrorMessage('Erro de conexão. Tente novamente mais tarde.');\r\n            }\r\n        } else {\r\n            setErrorMessage('Por favor, preencha todos os campos.');\r\n        }\r\n    };\r\n\r\n    const handleTwoFactorSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        if (twoFactorToken) {\r\n            try {\r\n                // Enviar o Token 2FA para o back-end\r\n                const response = await fetch('http://localhost:5000/api/auth/verify-2fa', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        email,\r\n                        twoFactorToken,\r\n                    }),\r\n                });\r\n\r\n                const data = await response.json();\r\n\r\n                if (response.ok) {\r\n                    alert('Login bem-sucedido!');\r\n                    localStorage.setItem('token', data.token); // Exemplo de armazenamento de token\r\n                } else {\r\n                    setErrorMessage(data.message || 'Token 2FA inválido');\r\n                }\r\n            } catch (error) {\r\n                setErrorMessage('Erro ao verificar o Token 2FA');\r\n            }\r\n        } else {\r\n            setErrorMessage('Por favor, insira o Token 2FA');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form-box\">\r\n                {!showTwoFactor ? (\r\n                    // Formulário de login (email e senha)\r\n                    <form onSubmit={handleLogin}>\r\n                        <h3>Login</h3>\r\n                        <input\r\n                            type=\"email\"\r\n                            placeholder=\"Email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Senha\"\r\n                            value={senha}\r\n                            onChange={(e) => setSenha(e.target.value)}\r\n                        />\r\n                        <button type=\"submit\">Entrar</button>\r\n                    </form>\r\n                ) : (\r\n                    // Formulário de Token 2FA\r\n                    <div className=\"qrcode-container\">\r\n                        <p>Digite o código de autenticação de dois fatores enviado para você.</p>\r\n                        <form onSubmit={handleTwoFactorSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Token 2FA\"\r\n                                value={twoFactorToken}\r\n                                onChange={(e) => setTwoFactorToken(e.target.value)}\r\n                            />\r\n                            <button type=\"submit\">Verificar Token</button>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n                {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n                {!showTwoFactor && (\r\n                    <p>\r\n                        Não tem uma conta? <a href=\"/registro\">Cadastro</a>\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}